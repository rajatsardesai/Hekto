{"version":3,"file":"static/js/618.215e36ce.chunk.js","mappings":"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","sources":["components/MetaData.jsx","components/User/EditProfile.jsx","components/User/EditProfilePassword.jsx","components/User/Profile.jsx","yupSchema/index.js"],"sourcesContent":["import React from 'react';\nimport { Helmet, HelmetProvider } from 'react-helmet-async';\n\nconst MetaData = ({ title }) => {\n    return (\n        <HelmetProvider>\n            <Helmet>\n                <title>{title}</title>\n            </Helmet>\n        </HelmetProvider>\n    )\n}\n\nexport default MetaData\n","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nconst EditProfile = (props) => {\r\n    const { label, name, isEditing, value, handleEditClick, errors, touched, handleBlur, handleChange, handleSubmit }\r\n        = props;\r\n\r\n    return (\r\n        <>\r\n            {!isEditing ?\r\n                <>\r\n                    <div className=\"ms-md-2 me-md-auto mx-2 text-truncate\">\r\n                        <div className=\"fw-bold\">{label}:</div>\r\n                        {value}\r\n                    </div>\r\n                    <Button variant=\"secondary\" onClick={() => handleEditClick(true, value)}>Edit</Button>\r\n                </>\r\n                :\r\n                <>\r\n                    <div className=\"ms-md-2 me-md-auto mx-2\">\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            value={value}\r\n                            name={name}\r\n                            onChange={handleChange} onBlur={handleBlur} isInvalid={touched && errors}\r\n                            aria-label={label}\r\n                            aria-describedby={label}\r\n                        />\r\n                        {\r\n                            errors && touched ?\r\n                                <Form.Control.Feedback type=\"invalid\">\r\n                                    {errors}\r\n                                </Form.Control.Feedback>\r\n                                : null\r\n                        }\r\n                    </div>\r\n                    <Button disabled={errors ? true : false} variant=\"secondary\" type=\"submit\" onClick={() => {\r\n                        handleEditClick(false, value)\r\n                        handleSubmit();\r\n                    }}>\r\n                        Save\r\n                    </Button>\r\n                </>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default EditProfile;\r\n","import React, { useState, memo } from 'react';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { updatePassword } from '../../store/actions/userAction';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useFormik } from \"formik\";\r\nimport { profilePasswordSchema } from '../../yupSchema';\r\n\r\nconst initialValues = {\r\n    oldPassword: \"\",\r\n    newPassword: \"\",\r\n    confirmNewPassword: \"\"\r\n};\r\n\r\nconst EditProfilePassword = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    //  States to update password\r\n    const [isEditing, setIsEditing] = useState(false);\r\n\r\n    //handle click to edit or save the passwords form\r\n    const handlePasswordClick = (value) => {\r\n        setTimeout(() => {\r\n            setIsEditing(value);\r\n        });\r\n    }\r\n\r\n    // Form handling and validation -- Formik and Yup\r\n    const { values, errors, touched, handleBlur, handleChange, handleSubmit } = useFormik({\r\n        initialValues,\r\n        validationSchema: profilePasswordSchema,\r\n        onSubmit: values => {\r\n            const updateFormPassword = new FormData();\r\n\r\n            updateFormPassword.set(\"oldPassword\", values.oldPassword);\r\n            updateFormPassword.set(\"newPassword\", values.newPassword);\r\n            updateFormPassword.set(\"confirmPassword\", values.confirmNewPassword);\r\n\r\n            dispatch(updatePassword(updateFormPassword));\r\n        }\r\n    });\r\n\r\n    return (\r\n        <>\r\n            {\r\n                !isEditing ?\r\n                    <>\r\n                        <div className=\"ms-md-2 me-md-auto mx-2\">\r\n                            <div className=\"fw-bold\">Password:</div>\r\n                            ********\r\n                        </div>\r\n                        <Button variant=\"secondary\" onClick={() => handlePasswordClick(true)}>Change Password</Button>\r\n                    </> :\r\n                    <>\r\n                        <Form onSubmit={handleSubmit} className=\"w-100\">\r\n                            <Form.Group className=\"mb-3\">\r\n                                <div className=\"ms-md-2 me-md-auto mx-2 mb-3\">\r\n                                    <Form.Control\r\n                                        type=\"password\"\r\n                                        value={values.oldPassword}\r\n                                        name=\"oldPassword\"\r\n                                        placeholder=\"Enter your old Password\"\r\n                                        onChange={handleChange} onBlur={handleBlur} isInvalid={touched.oldPassword && errors.oldPassword}\r\n                                        aria-label=\"oldPassword\"\r\n                                        aria-describedby=\"oldPassword\"\r\n                                    />\r\n                                    {\r\n                                        errors.oldPassword && touched.oldPassword ?\r\n                                            <Form.Control.Feedback type=\"invalid\">\r\n                                                {errors.oldPassword}\r\n                                            </Form.Control.Feedback>\r\n                                            : null\r\n                                    }\r\n                                    <Form.Control\r\n                                        type=\"password\"\r\n                                        value={values.newPassword}\r\n                                        name=\"newPassword\"\r\n                                        placeholder=\"Enter your new Password\"\r\n                                        className=\"my-3\"\r\n                                        onChange={handleChange} onBlur={handleBlur} isInvalid={touched.newPassword && errors.newPassword}\r\n                                        aria-label=\"newPassword\"\r\n                                        aria-describedby=\"newPassword\"\r\n                                    />\r\n                                    {\r\n                                        errors.newPassword && touched.newPassword ?\r\n                                            <Form.Control.Feedback type=\"invalid\">\r\n                                                {errors.newPassword}\r\n                                            </Form.Control.Feedback>\r\n                                            : null\r\n                                    }\r\n                                    <Form.Control\r\n                                        type=\"password\"\r\n                                        value={values.confirmNewPassword}\r\n                                        name=\"confirmNewPassword\"\r\n                                        placeholder=\"Enter your confirm Password\"\r\n                                        onChange={handleChange} onBlur={handleBlur} isInvalid={touched.confirmNewPassword && errors.confirmNewPassword}\r\n                                        aria-label=\"confirmPassword\"\r\n                                        aria-describedby=\"confirmPassword\"\r\n                                    />\r\n                                    {\r\n                                        errors.confirmNewPassword && touched.confirmNewPassword ?\r\n                                            <Form.Control.Feedback type=\"invalid\">\r\n                                                {errors.confirmNewPassword}\r\n                                            </Form.Control.Feedback>\r\n                                            : null\r\n                                    }\r\n                                </div>\r\n                                <Button disabled={Object.keys(errors).length !== 0 ? true : false} variant=\"secondary\" type=\"submit\" onClick={() => handlePasswordClick(false)}>\r\n                                    Save\r\n                                </Button>\r\n                            </Form.Group>\r\n                        </Form>\r\n                    </>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(EditProfilePassword);\r\n","import React, { useEffect, useState } from 'react';\r\nimport HeaderLoading from '../Header/HeaderLoading';\r\nimport HeaderAlert from '../Header/HeaderAlert';\r\nimport MetaData from '../MetaData';\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\nimport Container from 'react-bootstrap/esm/Container';\r\nimport EditProfile from './EditProfile';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { updateProfile } from '../../store/actions/userAction';\r\nimport { UPDATE_PROFILE_RESET } from '../../store/constants/userConstants';\r\nimport { useFormik } from \"formik\";\r\nimport { profileSchema } from '../../yupSchema';\r\nimport ProfilePassword from './EditProfilePassword';\r\n\r\nconst initialValues = {\r\n    name: \"\",\r\n    email: \"\"\r\n};\r\n\r\nconst Profile = () => {\r\n\r\n    const navigate = useNavigate();\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const { user, isAuthenticated } = useSelector((state) => state.user);\r\n\r\n    const { success, error, message, headerLoading } = useSelector(\r\n        (state) => state.profile\r\n    );\r\n\r\n    // Form handling and validation -- Formik and Yup\r\n    const { values, setFieldValue, errors, touched, handleBlur, handleChange, handleSubmit } = useFormik({\r\n        initialValues,\r\n        validationSchema: profileSchema,\r\n        onSubmit: values => {\r\n            const updateForm = new FormData();\r\n\r\n            updateForm.set(\"name\", values.name);\r\n            updateForm.set(\"email\", values.email);\r\n\r\n            dispatch(updateProfile(updateForm));\r\n        },\r\n        validateOnChange: true,\r\n        validateOnBlur: true\r\n    });\r\n\r\n    // States to update name and email\r\n    const [isEditingName, setIsEditingName] = useState(false);\r\n    const [isEditingEmail, setIsEditingEmail] = useState(false);\r\n\r\n    //handle click to edit or save the name and email in form\r\n    const handleEditClick = (value, updateValue) => {\r\n        updateValue === values.name ?\r\n            setIsEditingName(value) :\r\n            setIsEditingEmail(value)\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (user) {\r\n            setFieldValue('name', user.name);\r\n            setFieldValue('email', user.email);\r\n        }\r\n        dispatch({\r\n            type: UPDATE_PROFILE_RESET\r\n        });\r\n    }, [isAuthenticated, navigate, user, dispatch, setFieldValue]);\r\n\r\n    return (\r\n        <>\r\n            {/* Title tag */}\r\n            <MetaData title={\"Hekto Your Account\"} />\r\n\r\n            {/* React top loading bar */}\r\n            <HeaderLoading progressLoading={headerLoading} />\r\n\r\n            {/* Header alert */}\r\n            {\r\n                (error || success) &&\r\n                <HeaderAlert key={message} error={error} message={message} />\r\n            }\r\n\r\n            {/* Profile */}\r\n            <Container className=\"profile-container\">\r\n                <h3 className=\"my-4\">Your account</h3>\r\n                <ListGroup as=\"ol\">\r\n                    <ListGroup.Item\r\n                        as=\"li\"\r\n                        className=\"d-flex justify-content-between align-items-center\"\r\n                    >\r\n                        <EditProfile label=\"Name\" name=\"name\" isEditing={isEditingName} value={values.name} handleEditClick={handleEditClick} errors={errors.name} touched={touched.name} handleBlur={handleBlur} handleChange={handleChange} handleSubmit={handleSubmit} />\r\n                    </ListGroup.Item>\r\n                    <ListGroup.Item\r\n                        as=\"li\"\r\n                        className=\"d-flex justify-content-between align-items-center\"\r\n                    >\r\n                        <EditProfile label=\"Email\" name=\"email\" isEditing={isEditingEmail} value={values.email} handleEditClick={handleEditClick} errors={errors.email} touched={touched.email} handleBlur={handleBlur} handleChange={handleChange} handleSubmit={handleSubmit} />\r\n                    </ListGroup.Item>\r\n                    <ListGroup.Item\r\n                        as=\"li\"\r\n                        className=\"d-flex justify-content-between align-items-start\"\r\n                    >\r\n                        <div className=\"ms-2 me-auto\">\r\n                            <div className=\"fw-bold\">Joined on:</div>\r\n                            {String(user.createdAt).substr(0, 10)}\r\n                        </div>\r\n                    </ListGroup.Item>\r\n                    <ListGroup.Item\r\n                        as=\"li\"\r\n                        className=\"d-flex justify-content-between align-items-start\"\r\n                    >\r\n                        <ProfilePassword />\r\n                    </ListGroup.Item>\r\n\r\n                </ListGroup>\r\n            </Container >\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Profile;\r\n","import * as Yup from \"yup\";\r\n\r\n// User schemas\r\nexport const loginSchema = Yup.object({\r\n    email: Yup.string().email(\"Invalid Email\").required(\"Please enter your email\"),\r\n    password: Yup.string().min(6, \"Password must be at least 6 characters\").required(\"Please enter your password\")\r\n});\r\n\r\nexport const forgotPassSchema = Yup.object({\r\n    email: Yup.string().email(\"Invalid Email\").required(\"Please enter your email\")\r\n});\r\n\r\nexport const resetPassSchema = Yup.object({\r\n    password: Yup.string().min(6, 'Password must be at least 6 characters').required(\"Please enter your new password\"),\r\n    confirmPassword: Yup.string().min(6, 'Password must be at least 6 characters').oneOf([Yup.ref('password'), null], 'Password does not match').required(\"Please confirm your new password\"),\r\n});\r\n\r\nexport const signupSchema = Yup.object({\r\n    name: Yup.string().min(2, \"Name must be at least 2 characters\").max(25, \"Name should not be more than 25 characters\").required(\"Please enter your name\"),\r\n    email: Yup.string().email(\"Invalid Email\").required(\"Please enter your email\"),\r\n    password: Yup.string().min(6, 'Password must be at least 6 characters').required(\"Please enter your password\"),\r\n    avatar: Yup.mixed().required(\"Please enter your image\")\r\n});\r\n\r\nexport const profileSchema = Yup.object({\r\n    name: Yup.string().min(2, \"Name must be at least 2 characters\").max(25, \"Name should not be more than 25 characters\").required(\"Please enter your name\"),\r\n    email: Yup.string().email(\"Invalid Email\").required(\"Please enter your email\"),\r\n});\r\n\r\nexport const profilePasswordSchema = Yup.object({\r\n    oldPassword: Yup.string().min(6, 'Old password must be at least 6 characters').required(\"Please enter your old password\"),\r\n    newPassword: Yup.string().min(6, 'New password must be at least 6 characters').required(\"Please enter your new password\"),\r\n    confirmNewPassword: Yup.string().min(6, 'New password must be at least 6 characters').oneOf([Yup.ref('newPassword'), null], 'Password does not match').required(\"Please confirm your new password\"),\r\n});\r\n\r\n// Cart schemas\r\nexport const shippingSchema = Yup.object({\r\n    address: Yup.string().min(6, 'Address must be at least 6 characters').required(\"Please enter your address\"),\r\n    city: Yup.string().min(3, 'City must be at least 3 characters').required(\"Please enter your city\"),\r\n    state: Yup.string().required(\"Please select your state\"),\r\n    landmark: Yup.string().min(3, 'Landmark must be at least 3 characters'),\r\n    pinCode: Yup.number().typeError(\"Pin code must be a number\").min(3, 'Pin code must be at least 3 characters').required(\"Please enter your pin code\"),\r\n    phoneNo: Yup.number().typeError(\"Phone number must be a number\").required(\"Please enter your phone number\"),\r\n});\r\n\r\n// Admin schemas\r\nexport const productSchema = Yup.object({\r\n    name: Yup.string().min(3, \"Name must be at least 3 characters\").required(\"Please enter product name\"),\r\n    price: Yup.number().typeError(\"Price must be a number\").required(\"Please enter product price\"),\r\n    description: Yup.string().min(25, \"Description must be at least 25 characters\").max(2000, \"Description should not be more than 2000 characters\").required(\"Please enter product description\"),\r\n    category: Yup.string().required(\"Please select product category\"),\r\n    stock: Yup.number().min(1, \"Please add atleast 1 product\").positive(\"Stock must be a positive number\").typeError(\"Stock must be a number\").required(\"Please enter product stock\"),\r\n    images: Yup.mixed().required(\"Please choose product image\"),\r\n    imagesPreview: Yup.mixed(),\r\n});\r\n\r\nexport const updateUserSchema = Yup.object({\r\n    name: Yup.string().min(2, \"Name must be at least 2 characters\").max(25, \"Name should not be more than 25 characters\").required(\"Please enter name\"),\r\n    email: Yup.string().email(\"Invalid Email\").required(\"Please enter email\"),\r\n    role: Yup.string().required(\"Please select role\"),\r\n});"],"names":["_ref","title","_jsx","HelmetProvider","children","Helmet","props","label","name","isEditing","value","handleEditClick","errors","touched","handleBlur","handleChange","handleSubmit","_Fragment","_jsxs","className","Form","type","onChange","onBlur","isInvalid","Button","disabled","variant","onClick","initialValues","oldPassword","newPassword","confirmNewPassword","EditProfilePassword","dispatch","useDispatch","_useState","useState","_useState2","_slicedToArray","setIsEditing","handlePasswordClick","setTimeout","_useFormik","useFormik","validationSchema","profilePasswordSchema","onSubmit","values","updateFormPassword","FormData","set","updatePassword","placeholder","Object","keys","length","memo","email","navigate","useNavigate","_useSelector","useSelector","state","user","isAuthenticated","_useSelector2","profile","success","error","message","headerLoading","profileSchema","updateForm","updateProfile","validateOnChange","validateOnBlur","setFieldValue","isEditingName","setIsEditingName","_useState3","_useState4","isEditingEmail","setIsEditingEmail","updateValue","useEffect","UPDATE_PROFILE_RESET","MetaData","HeaderLoading","progressLoading","HeaderAlert","Container","ListGroup","as","EditProfile","String","createdAt","substr","ProfilePassword","loginSchema","Yup","required","password","min","forgotPassSchema","resetPassSchema","confirmPassword","oneOf","signupSchema","max","avatar","shippingSchema","address","city","landmark","pinCode","typeError","phoneNo","productSchema","price","description","category","stock","positive","images","imagesPreview","updateUserSchema","role"],"sourceRoot":""}