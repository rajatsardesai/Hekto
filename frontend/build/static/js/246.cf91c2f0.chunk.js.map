{"version":3,"file":"static/js/246.cf91c2f0.chunk.js","mappings":"8IAIMA,EAAU,WACZ,OACIC,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACIC,EAAAA,EAAAA,MAACC,EAAAA,EAAS,CAAAF,SAAA,EACNF,EAAAA,EAAAA,KAACI,EAAAA,EAAAA,KAAc,CAACC,GAAIC,EAAAA,GAAMC,GAAI,mBAAoBC,UAAU,yCAAwCN,SAAC,eACrGF,EAAAA,EAAAA,KAACI,EAAAA,EAAAA,KAAc,CAACC,GAAIC,EAAAA,GAAMC,GAAI,kBAAmBC,UAAU,uFAAsFN,SAAC,cAClJF,EAAAA,EAAAA,KAACI,EAAAA,EAAAA,KAAc,CAACC,GAAIC,EAAAA,GAAMC,GAAI,gBAAiBC,UAAU,uFAAsFN,SAAC,YAChJF,EAAAA,EAAAA,KAACI,EAAAA,EAAAA,KAAc,CAACC,GAAIC,EAAAA,GAAMC,GAAI,eAAgBC,UAAU,uFAAsFN,SAAC,WAC/IF,EAAAA,EAAAA,KAACI,EAAAA,EAAAA,KAAc,CAACC,GAAIC,EAAAA,GAAMC,GAAI,iBAAkBC,UAAU,uFAAsFN,SAAC,gBAIjK,EAEA,KAAeO,EAAAA,EAAAA,MAAKV,E,qNCAdW,EAAgB,CAClBC,KAAM,GACNC,MAAO,GACPC,KAAM,IA6GV,UA1GmB,WACf,IAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MACTC,GAAOC,EAAAA,EAAAA,MAAPD,GAERE,GAAgHC,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMC,WAAW,IAA/HC,EAAwBJ,EAAvCK,cAAgDC,EAAgBN,EAAvBO,MAAkCC,EAAkBR,EAA3BS,QAA6BC,EAAIV,EAAJU,KACvGC,GAAsGV,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMU,OAAO,IAAjHC,EAAmBF,EAAlCN,cAA2CS,EAAWH,EAAlBJ,MAA6BQ,EAAaJ,EAAtBF,QAAwBO,EAASL,EAATK,UAGxFC,GAA2FC,EAAAA,EAAAA,IAAU,CACjG5B,cAAAA,EACA6B,iBAAkBC,EAAAA,GAClBC,SAAU,SAAAC,GACN,IAAMC,EAAc,IAAIC,SAExBD,EAAYE,IAAI,OAAQH,EAAO/B,MAC/BgC,EAAYE,IAAI,QAASH,EAAO9B,OAChC+B,EAAYE,IAAI,OAAQH,EAAO7B,MAE/BC,GAASgC,EAAAA,EAAAA,IAAW5B,EAAIyB,GAC5B,IAXID,EAAML,EAANK,OAAQK,EAAaV,EAAbU,cAAeC,EAAMX,EAANW,OAAQC,EAAOZ,EAAPY,QAASC,EAAUb,EAAVa,WAAYC,EAAYd,EAAZc,aAAcC,EAAYf,EAAZe,aA+B1E,OAjBAC,EAAAA,EAAAA,YAAU,WACFvB,GAAQA,EAAKwB,MAAQpC,EACrBJ,GAASyC,EAAAA,EAAAA,IAAerC,KAExB6B,EAAc,OAAQjB,EAAKnB,MAC3BoC,EAAc,QAASjB,EAAKlB,OAC5BmC,EAAc,OAAQjB,EAAKjB,OAG3BuB,GACAoB,YAAW,WACPxC,EAAS,gBACTF,EAAS,CAAE2C,KAAMC,EAAAA,IACrB,GAAG,IAEX,GAAG,CAAC1C,EAAUF,EAAUsB,EAAWF,EAAahB,EAAIY,EAAMiB,KAGtD5C,EAAAA,EAAAA,MAAAF,EAAAA,SAAA,CAAAC,SAAA,EAEIF,EAAAA,EAAAA,KAAC2D,EAAAA,EAAQ,CAACC,MAAO,yBAGjB5D,EAAAA,EAAAA,KAAC6D,EAAAA,EAAa,CAACC,gBAAiBtC,GAA4BS,KAIvDP,GAAoBQ,GAAeE,KACpCpC,EAAAA,EAAAA,KAAC+D,EAAAA,EAAW,CAACpC,MAAOD,GAAoBQ,EAAaL,QAASD,GAAsBO,KAIxFnC,EAAAA,EAAAA,KAACgE,EAAAA,EAAS,CAACxD,UAAU,cAAaN,UAC9BC,EAAAA,EAAAA,MAAC8D,EAAAA,EAAG,CAAA/D,SAAA,EACAF,EAAAA,EAAAA,KAAA,MAAIQ,UAAU,2CAA0CN,SAAC,qBACzDF,EAAAA,EAAAA,KAACkE,EAAAA,EAAG,CAACC,GAAI,EAAG3D,UAAU,eAAcN,UAChCF,EAAAA,EAAAA,KAACD,EAAAA,EAAO,OAIZC,EAAAA,EAAAA,KAACkE,EAAAA,EAAG,CAACC,GAAI,EAAEjE,UACPC,EAAAA,EAAAA,MAACiE,EAAAA,EAAI,CAAC5D,UAAU,8BAA8BiC,SAAUW,EAAalD,SAAA,EACjEF,EAAAA,EAAAA,KAAA,MAAIQ,UAAU,2CAA0CN,SAAC,iBACzDC,EAAAA,EAAAA,MAACkE,EAAAA,EAAK,CAAC7D,UAAU,+BAA+B8D,IAAK,EAAEpE,SAAA,EACnDC,EAAAA,EAAAA,MAACiE,EAAAA,EAAAA,MAAU,CAAC5D,UAAU,aAAa+D,UAAU,OAAMrE,SAAA,EAC/CF,EAAAA,EAAAA,KAACoE,EAAAA,EAAAA,MAAU,CAAAlE,SAAC,UACZF,EAAAA,EAAAA,KAACoE,EAAAA,EAAAA,QAAY,CAACX,KAAK,OAAO9C,KAAK,OAAO6D,MAAO9B,EAAO/B,KAAMH,UAAU,oBAAoBiE,SAAUtB,EAAcuB,OAAQxB,EAAYyB,UAAW1B,EAAQtC,MAAQqC,EAAOrC,OAElKqC,EAAOrC,MAAQsC,EAAQtC,MACnBX,EAAAA,EAAAA,KAACoE,EAAAA,EAAAA,QAAAA,SAAqB,CAACX,KAAK,UAASvD,SAChC8C,EAAOrC,OAEV,SAGdR,EAAAA,EAAAA,MAACiE,EAAAA,EAAAA,MAAU,CAAC5D,UAAU,aAAa+D,UAAU,QAAOrE,SAAA,EAChDF,EAAAA,EAAAA,KAACoE,EAAAA,EAAAA,MAAU,CAAAlE,SAAC,WACZF,EAAAA,EAAAA,KAACoE,EAAAA,EAAAA,QAAY,CAACX,KAAK,QAAQ9C,KAAK,QAAQ6D,MAAO9B,EAAO9B,MAAOJ,UAAU,oBAAoBiE,SAAUtB,EAAcuB,OAAQxB,EAAYyB,UAAW1B,EAAQrC,OAASoC,EAAOpC,QAEtKoC,EAAOpC,OAASqC,EAAQrC,OACpBZ,EAAAA,EAAAA,KAACoE,EAAAA,EAAAA,QAAAA,SAAqB,CAACX,KAAK,UAASvD,SAChC8C,EAAOpC,QAEV,YAIlBT,EAAAA,EAAAA,MAACiE,EAAAA,EAAAA,OAAW,CAACzD,KAAK,OAAO6D,MAAO9B,EAAO7B,KAAML,UAAU,oBAAoBiE,SAAUtB,EAAcuB,OAAQxB,EAAYyB,UAAW1B,EAAQpC,MAAQmC,EAAOnC,KAAM,aAAW,cAAaX,SAAA,EACnLF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,iBACRF,EAAAA,EAAAA,KAAA,UAAQwE,MAAM,OAAMtE,SAAC,UACrBF,EAAAA,EAAAA,KAAA,UAAQwE,MAAM,QAAOtE,SAAC,cAE1BF,EAAAA,EAAAA,KAACqE,EAAAA,EAAK,CAAC7D,UAAU,+BAA+B8D,IAAK,EAAEpE,UACnDF,EAAAA,EAAAA,KAAC4E,EAAAA,EAAM,CAACnB,KAAK,SAASjD,UAAU,kDAAkDqE,SAA0B,KAAhBnC,EAAO7B,KAA2BX,SAAC,yBAQ/J,C,sDCnHA,IAViB,SAAH4E,GAAmB,IAAblB,EAAKkB,EAALlB,MAChB,OACI5D,EAAAA,EAAAA,KAAC+E,EAAAA,GAAc,CAAA7E,UACXF,EAAAA,EAAAA,KAACgF,EAAAA,GAAM,CAAA9E,UACHF,EAAAA,EAAAA,KAAA,SAAAE,SAAQ0D,OAIxB,C,sQCRaqB,EAAcC,EAAAA,GAAW,CAClCtE,MAAOsE,EAAAA,KAAatE,MAAM,iBAAiBuE,SAAS,2BACpDC,SAAUF,EAAAA,KAAaG,IAAI,EAAG,0CAA0CF,SAAS,gCAGxEG,EAAmBJ,EAAAA,GAAW,CACvCtE,MAAOsE,EAAAA,KAAatE,MAAM,iBAAiBuE,SAAS,6BAG3CI,EAAkBL,EAAAA,GAAW,CACtCE,SAAUF,EAAAA,KAAaG,IAAI,EAAG,0CAA0CF,SAAS,kCACjFK,gBAAiBN,EAAAA,KAAaG,IAAI,EAAG,0CAA0CI,MAAM,CAACP,EAAAA,GAAQ,YAAa,MAAO,2BAA2BC,SAAS,sCAG7IO,EAAeR,EAAAA,GAAW,CACnCvE,KAAMuE,EAAAA,KAAaG,IAAI,EAAG,sCAAsCM,IAAI,GAAI,8CAA8CR,SAAS,0BAC/HvE,MAAOsE,EAAAA,KAAatE,MAAM,iBAAiBuE,SAAS,2BACpDC,SAAUF,EAAAA,KAAaG,IAAI,EAAG,0CAA0CF,SAAS,8BACjFS,OAAQV,EAAAA,KAAYC,SAAS,6BAGpBU,EAAgBX,EAAAA,GAAW,CACpCvE,KAAMuE,EAAAA,KAAaG,IAAI,EAAG,sCAAsCM,IAAI,GAAI,8CAA8CR,SAAS,0BAC/HvE,MAAOsE,EAAAA,KAAatE,MAAM,iBAAiBuE,SAAS,6BAG3CW,EAAwBZ,EAAAA,GAAW,CAC5Ca,YAAab,EAAAA,KAAaG,IAAI,EAAG,8CAA8CF,SAAS,kCACxFa,YAAad,EAAAA,KAAaG,IAAI,EAAG,8CAA8CF,SAAS,kCACxFc,mBAAoBf,EAAAA,KAAaG,IAAI,EAAG,8CAA8CI,MAAM,CAACP,EAAAA,GAAQ,eAAgB,MAAO,2BAA2BC,SAAS,sCAIvJe,EAAiBhB,EAAAA,GAAW,CACrCiB,QAASjB,EAAAA,KAAaG,IAAI,EAAG,yCAAyCF,SAAS,6BAC/EiB,KAAMlB,EAAAA,KAAaG,IAAI,EAAG,sCAAsCF,SAAS,0BACzE7D,MAAO4D,EAAAA,KAAaC,SAAS,4BAC7BkB,SAAUnB,EAAAA,KAAaG,IAAI,EAAG,0CAC9BiB,QAASpB,EAAAA,KAAaqB,UAAU,6BAA6BlB,IAAI,EAAG,0CAA0CF,SAAS,8BACvHqB,QAAStB,EAAAA,KAAaqB,UAAU,iCAAiCpB,SAAS,oCAIjEsB,EAAgBvB,EAAAA,GAAW,CACpCvE,KAAMuE,EAAAA,KAAaG,IAAI,EAAG,sCAAsCF,SAAS,6BACzEuB,MAAOxB,EAAAA,KAAaqB,UAAU,0BAA0BpB,SAAS,8BACjEwB,YAAazB,EAAAA,KAAaG,IAAI,GAAI,8CAA8CM,IAAI,IAAM,uDAAuDR,SAAS,oCAC1JyB,SAAU1B,EAAAA,KAAaC,SAAS,kCAChC0B,MAAO3B,EAAAA,KAAaG,IAAI,EAAG,gCAAgCyB,SAAS,mCAAmCP,UAAU,0BAA0BpB,SAAS,8BACpJ4B,OAAQ7B,EAAAA,KAAYC,SAAS,+BAC7B6B,cAAe9B,EAAAA,OAGN1C,EAAmB0C,EAAAA,GAAW,CACvCvE,KAAMuE,EAAAA,KAAaG,IAAI,EAAG,sCAAsCM,IAAI,GAAI,8CAA8CR,SAAS,qBAC/HvE,MAAOsE,EAAAA,KAAatE,MAAM,iBAAiBuE,SAAS,sBACpDtE,KAAMqE,EAAAA,KAAaC,SAAS,uB","sources":["components/Admin/Sidebar.jsx","components/Admin/UpdateUser.jsx","components/MetaData.jsx","yupSchema/index.js"],"sourcesContent":["import React, { memo } from 'react';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport { Link } from 'react-router-dom';\n\nconst Sidebar = () => {\n    return (\n        <>\n            <ListGroup>\n                <ListGroup.Item as={Link} to={\"/admin/dashboard\"} className=\"bg-gray-300-color border-0 p-3 font-18\">Dashboard</ListGroup.Item>\n                <ListGroup.Item as={Link} to={\"/admin/products\"} className=\"bg-gray-300-color border-top border-end-0 border-bottom-0 border-start-0 p-3 font-18\">Products</ListGroup.Item>\n                <ListGroup.Item as={Link} to={\"/admin/orders\"} className=\"bg-gray-300-color border-top border-end-0 border-bottom-0 border-start-0 p-3 font-18\">Orders</ListGroup.Item>\n                <ListGroup.Item as={Link} to={\"/admin/users\"} className=\"bg-gray-300-color border-top border-end-0 border-bottom-0 border-start-0 p-3 font-18\">Users</ListGroup.Item>\n                <ListGroup.Item as={Link} to={\"/admin/reviews\"} className=\"bg-gray-300-color border-top border-end-0 border-bottom-0 border-start-0 p-3 font-18\">Reviews</ListGroup.Item>\n            </ListGroup>\n        </>\n    )\n}\n\nexport default memo(Sidebar);\n","import React, { useEffect } from 'react';\nimport MetaData from '../MetaData';\nimport HeaderLoading from '../Header/HeaderLoading';\nimport HeaderAlert from '../Header/HeaderAlert';\nimport Sidebar from './Sidebar';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Container from 'react-bootstrap/esm/Container';\nimport Button from 'react-bootstrap/Button';\nimport Stack from 'react-bootstrap/esm/Stack';\nimport Form from 'react-bootstrap/Form';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { UPDATE_USER_RESET } from '../../store/constants/userConstants';\nimport { getUserDetails, updateUser } from '../../store/actions/userAction';\nimport { useFormik } from \"formik\";\nimport { updateUserSchema } from '../../yupSchema';\n\nconst initialValues = {\n    name: \"\",\n    email: \"\",\n    role: \"\",\n};\n\nconst UpdateUser = () => {\n    const dispatch = useDispatch();\n    const navigate = useNavigate();\n    const { id } = useParams();\n\n    const { headerLoading: userDetailsHeaderLoading, error: userDetailsError, message: userDetailsMessage, user } = useSelector(state => state.userDetails);\n    const { headerLoading: updateHeaderLoading, error: updateError, message: updateMessage, isUpdated } = useSelector(state => state.profile);\n\n    // Form handling and validation -- Formik and Yup\n    const { values, setFieldValue, errors, touched, handleBlur, handleChange, handleSubmit } = useFormik({\n        initialValues,\n        validationSchema: updateUserSchema,\n        onSubmit: values => {\n            const newUserForm = new FormData();\n\n            newUserForm.set(\"name\", values.name);\n            newUserForm.set(\"email\", values.email);\n            newUserForm.set(\"role\", values.role);\n\n            dispatch(updateUser(id, newUserForm));\n        }\n    });\n\n    useEffect(() => {\n        if (user && user._id !== id) {\n            dispatch(getUserDetails(id));\n        } else {\n            setFieldValue(\"name\", user.name);\n            setFieldValue(\"email\", user.email);\n            setFieldValue(\"role\", user.role);\n        };\n\n        if (isUpdated) {\n            setTimeout(() => {\n                navigate(\"/admin/users\");\n                dispatch({ type: UPDATE_USER_RESET });\n            }, 5000);\n        }\n    }, [navigate, dispatch, isUpdated, updateError, id, user, setFieldValue]);\n\n    return (\n        <>\n            {/* Title tag */}\n            <MetaData title={\"Update User - Admin\"} />\n\n            {/* React top loading bar */}\n            <HeaderLoading progressLoading={userDetailsHeaderLoading || updateHeaderLoading} />\n\n            {/* Header alert */}\n            {\n                (userDetailsError || updateError || isUpdated) &&\n                <HeaderAlert error={userDetailsError || updateError} message={userDetailsMessage || updateMessage} />\n            }\n\n            {/* All products list */}\n            <Container className=\"my-5 h-60vh\">\n                <Row>\n                    <h5 className=\"fw-bold font-22 text-blue-500-color mb-4\">Admin Dashboard</h5>\n                    <Col lg={4} className=\"mb-5 pe-md-5\">\n                        <Sidebar />\n                    </Col>\n\n                    {/* Dashboard */}\n                    <Col lg={8}>\n                        <Form className=\"bg-gray-300-color px-4 py-5\" onSubmit={handleSubmit}>\n                            <h5 className=\"fw-bold font-18 text-blue-500-color mb-4\">Update User</h5>\n                            <Stack className=\"flex-column flex-md-row mt-4\" gap={3}>\n                                <Form.Group className=\"mb-3 w-100\" controlId=\"name\">\n                                    <Form.Label>Name</Form.Label>\n                                    <Form.Control type=\"text\" name=\"name\" value={values.name} className=\"font-lato font-16\" onChange={handleChange} onBlur={handleBlur} isInvalid={touched.name && errors.name} />\n                                    {\n                                        errors.name && touched.name ?\n                                            <Form.Control.Feedback type=\"invalid\">\n                                                {errors.name}\n                                            </Form.Control.Feedback>\n                                            : null\n                                    }\n                                </Form.Group>\n                                <Form.Group className=\"mb-3 w-100\" controlId=\"email\">\n                                    <Form.Label>Email</Form.Label>\n                                    <Form.Control type=\"email\" name=\"email\" value={values.email} className=\"font-lato font-16\" onChange={handleChange} onBlur={handleBlur} isInvalid={touched.email && errors.email} />\n                                    {\n                                        errors.email && touched.email ?\n                                            <Form.Control.Feedback type=\"invalid\">\n                                                {errors.email}\n                                            </Form.Control.Feedback>\n                                            : null\n                                    }\n                                </Form.Group>\n                            </Stack>\n                            <Form.Select name=\"role\" value={values.role} className=\"font-lato font-16\" onChange={handleChange} onBlur={handleBlur} isInvalid={touched.role && errors.role} aria-label=\"Choose role\">\n                                <option>Choose role</option>\n                                <option value=\"user\">User</option>\n                                <option value=\"admin\">Admin</option>\n                            </Form.Select>\n                            <Stack className=\"flex-column flex-md-row mt-4\" gap={2}>\n                                <Button type=\"submit\" className=\"bg-secondary-color border-0 py-2 px-3 rounded-0\" disabled={values.role === \"\" ? true : false}>Update</Button>\n                            </Stack>\n                        </Form>\n                    </Col>\n                </Row>\n            </Container>\n        </>\n    )\n}\n\nexport default UpdateUser;\n","import React from 'react';\nimport { Helmet, HelmetProvider } from 'react-helmet-async';\n\nconst MetaData = ({ title }) => {\n    return (\n        <HelmetProvider>\n            <Helmet>\n                <title>{title}</title>\n            </Helmet>\n        </HelmetProvider>\n    )\n}\n\nexport default MetaData\n","import * as Yup from \"yup\";\r\n\r\n// User schemas\r\nexport const loginSchema = Yup.object({\r\n    email: Yup.string().email(\"Invalid Email\").required(\"Please enter your email\"),\r\n    password: Yup.string().min(6, \"Password must be at least 6 characters\").required(\"Please enter your password\")\r\n});\r\n\r\nexport const forgotPassSchema = Yup.object({\r\n    email: Yup.string().email(\"Invalid Email\").required(\"Please enter your email\")\r\n});\r\n\r\nexport const resetPassSchema = Yup.object({\r\n    password: Yup.string().min(6, 'Password must be at least 6 characters').required(\"Please enter your new password\"),\r\n    confirmPassword: Yup.string().min(6, 'Password must be at least 6 characters').oneOf([Yup.ref('password'), null], 'Password does not match').required(\"Please confirm your new password\"),\r\n});\r\n\r\nexport const signupSchema = Yup.object({\r\n    name: Yup.string().min(2, \"Name must be at least 2 characters\").max(25, \"Name should not be more than 25 characters\").required(\"Please enter your name\"),\r\n    email: Yup.string().email(\"Invalid Email\").required(\"Please enter your email\"),\r\n    password: Yup.string().min(6, 'Password must be at least 6 characters').required(\"Please enter your password\"),\r\n    avatar: Yup.mixed().required(\"Please enter your image\")\r\n});\r\n\r\nexport const profileSchema = Yup.object({\r\n    name: Yup.string().min(2, \"Name must be at least 2 characters\").max(25, \"Name should not be more than 25 characters\").required(\"Please enter your name\"),\r\n    email: Yup.string().email(\"Invalid Email\").required(\"Please enter your email\"),\r\n});\r\n\r\nexport const profilePasswordSchema = Yup.object({\r\n    oldPassword: Yup.string().min(6, 'Old password must be at least 6 characters').required(\"Please enter your old password\"),\r\n    newPassword: Yup.string().min(6, 'New password must be at least 6 characters').required(\"Please enter your new password\"),\r\n    confirmNewPassword: Yup.string().min(6, 'New password must be at least 6 characters').oneOf([Yup.ref('newPassword'), null], 'Password does not match').required(\"Please confirm your new password\"),\r\n});\r\n\r\n// Cart schemas\r\nexport const shippingSchema = Yup.object({\r\n    address: Yup.string().min(6, 'Address must be at least 6 characters').required(\"Please enter your address\"),\r\n    city: Yup.string().min(3, 'City must be at least 3 characters').required(\"Please enter your city\"),\r\n    state: Yup.string().required(\"Please select your state\"),\r\n    landmark: Yup.string().min(3, 'Landmark must be at least 3 characters'),\r\n    pinCode: Yup.number().typeError(\"Pin code must be a number\").min(3, 'Pin code must be at least 3 characters').required(\"Please enter your pin code\"),\r\n    phoneNo: Yup.number().typeError(\"Phone number must be a number\").required(\"Please enter your phone number\"),\r\n});\r\n\r\n// Admin schemas\r\nexport const productSchema = Yup.object({\r\n    name: Yup.string().min(3, \"Name must be at least 3 characters\").required(\"Please enter product name\"),\r\n    price: Yup.number().typeError(\"Price must be a number\").required(\"Please enter product price\"),\r\n    description: Yup.string().min(25, \"Description must be at least 25 characters\").max(2000, \"Description should not be more than 2000 characters\").required(\"Please enter product description\"),\r\n    category: Yup.string().required(\"Please select product category\"),\r\n    stock: Yup.number().min(1, \"Please add atleast 1 product\").positive(\"Stock must be a positive number\").typeError(\"Stock must be a number\").required(\"Please enter product stock\"),\r\n    images: Yup.mixed().required(\"Please choose product image\"),\r\n    imagesPreview: Yup.mixed(),\r\n});\r\n\r\nexport const updateUserSchema = Yup.object({\r\n    name: Yup.string().min(2, \"Name must be at least 2 characters\").max(25, \"Name should not be more than 25 characters\").required(\"Please enter name\"),\r\n    email: Yup.string().email(\"Invalid Email\").required(\"Please enter email\"),\r\n    role: Yup.string().required(\"Please select role\"),\r\n});"],"names":["Sidebar","_jsx","_Fragment","children","_jsxs","ListGroup","as","Link","to","className","memo","initialValues","name","email","role","dispatch","useDispatch","navigate","useNavigate","id","useParams","_useSelector","useSelector","state","userDetails","userDetailsHeaderLoading","headerLoading","userDetailsError","error","userDetailsMessage","message","user","_useSelector2","profile","updateHeaderLoading","updateError","updateMessage","isUpdated","_useFormik","useFormik","validationSchema","updateUserSchema","onSubmit","values","newUserForm","FormData","set","updateUser","setFieldValue","errors","touched","handleBlur","handleChange","handleSubmit","useEffect","_id","getUserDetails","setTimeout","type","UPDATE_USER_RESET","MetaData","title","HeaderLoading","progressLoading","HeaderAlert","Container","Row","Col","lg","Form","Stack","gap","controlId","value","onChange","onBlur","isInvalid","Button","disabled","_ref","HelmetProvider","Helmet","loginSchema","Yup","required","password","min","forgotPassSchema","resetPassSchema","confirmPassword","oneOf","signupSchema","max","avatar","profileSchema","profilePasswordSchema","oldPassword","newPassword","confirmNewPassword","shippingSchema","address","city","landmark","pinCode","typeError","phoneNo","productSchema","price","description","category","stock","positive","images","imagesPreview"],"sourceRoot":""}