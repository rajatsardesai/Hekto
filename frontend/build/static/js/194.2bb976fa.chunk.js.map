{"version":3,"file":"static/js/194.2bb976fa.chunk.js","mappings":"q+hiBAkBO,SAASA,EAAoBC,GAChC,OAAOA,EAAOC,IAClB,CACO,IAAMC,EAAU,SAACC,EAAGC,GAEY,IAAvCC,EAAYC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAGP,EACX,OAAIM,EAAaF,GAAKE,EAAaD,IACvB,EACRC,EAAaF,GAAKE,EAAaD,GACxB,EACJ,CACX,ECSA,OACIK,aApCG,WACH,OAAOC,CACX,EAmCIC,mBAjCG,WAA8C,IAAlBC,EAAWN,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,GAC7C,OAAKM,EAGUF,EAAAA,QAAiB,SAACG,GAC7B,OAAOA,EAAMD,cAAgBA,CACjC,IACcE,KAAKZ,GALR,EAMf,EA0BIa,yBAzBG,SAAkCC,EAAWJ,GAChD,GAAKI,GAEAJ,EAEL,ODZyC,SAACK,EAAQC,EAAMN,GACxD,GAAIM,GAAQN,GAAyB,MAAVK,EAAgB,CACvC,IAAME,EAAQF,EAAOG,WAAU,SAACC,GAC5B,OAAOA,EAAEC,UAAYJ,GAAQG,EAAET,cAAgBA,CACnD,IACA,OAAkB,IAAXO,EAAeF,EAAOE,QAASX,CAC1C,CAEJ,CCIWe,CAA8Bb,EAAWM,EAAWJ,EAC/D,EAoBIY,eAlBG,SAAwBF,GAG3B,GADAG,QAAQC,KAAK,kHACRJ,EAEL,OD7B2B,SAACL,EAAQC,GACpC,GAAIA,GAAkB,MAAVD,EAAgB,CACxB,IAAME,EAAQF,EAAOG,WAAU,SAACC,GAC5B,OAAOA,EAAEC,UAAYJ,CACzB,IACA,OAAkB,IAAXC,EAAeF,EAAOE,QAASX,CAC1C,CAEJ,CCqBWmB,CAAgBjB,EAAWY,EACtC,EAaIM,cAZJ,SAAuBC,GACnB,OAAOA,EAAUf,MAAK,SAACX,EAAGC,GACtB,OAAOF,EAAQC,EAAGC,GAAG,SAACJ,GAClB,MAAO,GAAP8B,OAAU9B,EAAOY,YAAW,KAAAkB,OAAI9B,EAAOsB,QAC3C,GACJ,GACJ,E","sources":["../node_modules/country-state-city/lib/utils/index.js","../node_modules/country-state-city/lib/state.js"],"sourcesContent":["export const findEntryByCode = (source, code) => {\n    if (code && source != null) {\n        const codex = source.findIndex((c) => {\n            return c.isoCode === code;\n        });\n        return codex !== -1 ? source[codex] : undefined;\n    }\n    return undefined;\n};\nexport const findStateByCodeAndCountryCode = (source, code, countryCode) => {\n    if (code && countryCode && source != null) {\n        const codex = source.findIndex((c) => {\n            return c.isoCode === code && c.countryCode === countryCode;\n        });\n        return codex !== -1 ? source[codex] : undefined;\n    }\n    return undefined;\n};\nexport function defaultKeyToCompare(entity) {\n    return entity.name;\n}\nexport const compare = (a, b, \n// eslint-disable-next-line no-unused-vars\nkeyToCompare = defaultKeyToCompare) => {\n    if (keyToCompare(a) < keyToCompare(b))\n        return -1;\n    if (keyToCompare(a) > keyToCompare(b))\n        return 1;\n    return 0;\n};\n","import stateList from './assets/state.json';\nimport { findEntryByCode, findStateByCodeAndCountryCode, compare } from './utils';\n// Get a list of all states.\nexport function getAllStates() {\n    return stateList;\n}\n// Get a list of states belonging to a specific country.\nexport function getStatesOfCountry(countryCode = '') {\n    if (!countryCode)\n        return [];\n    // get data from file or cache\n    const states = stateList.filter((value) => {\n        return value.countryCode === countryCode;\n    });\n    return states.sort(compare);\n}\nexport function getStateByCodeAndCountry(stateCode, countryCode) {\n    if (!stateCode)\n        return undefined;\n    if (!countryCode)\n        return undefined;\n    return findStateByCodeAndCountryCode(stateList, stateCode, countryCode);\n}\n// to be deprecate\nexport function getStateByCode(isoCode) {\n    // eslint-disable-next-line no-console\n    console.warn(`WARNING! 'getStateByCode' has been deprecated, please use the new 'getStateByCodeAndCountry' function instead!`);\n    if (!isoCode)\n        return undefined;\n    return findEntryByCode(stateList, isoCode);\n}\nfunction sortByIsoCode(countries) {\n    return countries.sort((a, b) => {\n        return compare(a, b, (entity) => {\n            return `${entity.countryCode}-${entity.isoCode}`;\n        });\n    });\n}\nexport default {\n    getAllStates,\n    getStatesOfCountry,\n    getStateByCodeAndCountry,\n    getStateByCode,\n    sortByIsoCode,\n};\n"],"names":["defaultKeyToCompare","entity","name","compare","a","b","keyToCompare","arguments","length","undefined","getAllStates","stateList","getStatesOfCountry","countryCode","value","sort","getStateByCodeAndCountry","stateCode","source","code","codex","findIndex","c","isoCode","findStateByCodeAndCountryCode","getStateByCode","console","warn","findEntryByCode","sortByIsoCode","countries","concat"],"sourceRoot":""}